// CPP to C glue code generated by Sweaty on Wed Jun 13 23:03:09 2018

// NO WARRANTIES ON PRODUCTION, for experiemental purposes only.
// TODO: Class member variable *MUST* be added manually
#ifndef __AUTO_CODE_SUPERPOWEREDADVANCEDAUDIOPLAYER__
#define __AUTO_CODE_SUPERPOWEREDADVANCEDAUDIOPLAYER__

#ifdef __cplusplus
extern "C" {
#endif
  
  extern double SuperpoweredAdvancedAudioPlayer_positionMs(void * class_handler);
  extern float SuperpoweredAdvancedAudioPlayer_positionPercent(void * class_handler);
  extern int SuperpoweredAdvancedAudioPlayer_positionSeconds(void * class_handler);
  extern double SuperpoweredAdvancedAudioPlayer_displayPositionMs(void * class_handler);
  extern unsigned int SuperpoweredAdvancedAudioPlayer_durationMs(void * class_handler);
  extern unsigned int SuperpoweredAdvancedAudioPlayer_durationSeconds(void * class_handler);
  extern int SuperpoweredAdvancedAudioPlayer_waitingForBuffering(void * class_handler);
  extern int SuperpoweredAdvancedAudioPlayer_playing(void * class_handler);
  extern double SuperpoweredAdvancedAudioPlayer_waitingForSyncMs(void * class_handler);
  extern double SuperpoweredAdvancedAudioPlayer_willSyncMs(void * class_handler);
  extern double SuperpoweredAdvancedAudioPlayer_audioStartMs(void * class_handler);
  extern double SuperpoweredAdvancedAudioPlayer_tempo(void * class_handler);
  extern int SuperpoweredAdvancedAudioPlayer_masterTempo(void * class_handler);
  extern int SuperpoweredAdvancedAudioPlayer_pitchShift(void * class_handler);
  extern int SuperpoweredAdvancedAudioPlayer_pitchShiftCents(void * class_handler);
  extern double SuperpoweredAdvancedAudioPlayer_bpm(void * class_handler);
  extern double SuperpoweredAdvancedAudioPlayer_currentBpm(void * class_handler);
  extern int SuperpoweredAdvancedAudioPlayer_slip(void * class_handler);
  extern int SuperpoweredAdvancedAudioPlayer_scratching(void * class_handler);
  extern int SuperpoweredAdvancedAudioPlayer_reverse(void * class_handler);
  extern int SuperpoweredAdvancedAudioPlayer_looping(void * class_handler);
  extern double SuperpoweredAdvancedAudioPlayer_firstBeatMs(void * class_handler);
  extern double SuperpoweredAdvancedAudioPlayer_msElapsedSinceLastBeat(void * class_handler);
  extern double SuperpoweredAdvancedAudioPlayer_phase(void * class_handler);
  extern double SuperpoweredAdvancedAudioPlayer_quantum(void * class_handler);
  extern double SuperpoweredAdvancedAudioPlayer_bendMsOffset(void * class_handler);
  extern float SuperpoweredAdvancedAudioPlayer_beatIndex(void * class_handler);
  extern float SuperpoweredAdvancedAudioPlayer_bufferStartPercent(void * class_handler);
  extern float SuperpoweredAdvancedAudioPlayer_bufferEndPercent(void * class_handler);
  extern int SuperpoweredAdvancedAudioPlayer_currentBps(void * class_handler);
  extern int SuperpoweredAdvancedAudioPlayer_loadErrorCode(void * class_handler);
  extern char * SuperpoweredAdvancedAudioPlayer_fullyDownloadedFilePath(void * class_handler);
  extern char * SuperpoweredAdvancedAudioPlayer_tempFolderPath(void * class_handler);

  // READ-WRITE
  extern int SuperpoweredAdvancedAudioPlayer_syncMode_get(void * class_handler);
  extern void SuperpoweredAdvancedAudioPlayer_syncMode_set(void * class_handler, int newValue);
  extern int SuperpoweredAdvancedAudioPlayer_fixDoubleOrHalfBPM_get(void * class_handler);
  extern void SuperpoweredAdvancedAudioPlayer_fixDoubleOrHalfBPM_set(void * class_handler, int newValue);
  extern int SuperpoweredAdvancedAudioPlayer_dynamicHLSAlternativeSwitching_get(void * class_handler);
  extern void SuperpoweredAdvancedAudioPlayer_dynamicHLSAlternativeSwitching_set(void * class_handler, int newValue);
  extern int SuperpoweredAdvancedAudioPlayer_reverseToForwardAtLoopStart_get(void * class_handler);
  extern void SuperpoweredAdvancedAudioPlayer_reverseToForwardAtLoopStart_set(void * class_handler, int newValue);
  extern int SuperpoweredAdvancedAudioPlayer_getAudioStartMs_get(void * class_handler);
  extern void SuperpoweredAdvancedAudioPlayer_getAudioStartMs_set(void * class_handler, int newValue);
  extern int SuperpoweredAdvancedAudioPlayer_downloadSecondsAhead_get(void * class_handler);
  extern void SuperpoweredAdvancedAudioPlayer_downloadSecondsAhead_set(void * class_handler, int newValue);
  extern int SuperpoweredAdvancedAudioPlayer_maxDownloadAttempts_get(void * class_handler);
  extern void SuperpoweredAdvancedAudioPlayer_maxDownloadAttempts_set(void * class_handler, int newValue);
  extern float SuperpoweredAdvancedAudioPlayer_minTimeStretchingTempo_get(void * class_handler);
  extern void SuperpoweredAdvancedAudioPlayer_minTimeStretchingTempo_set(void * class_handler, float newValue);
  extern float SuperpoweredAdvancedAudioPlayer_maxTimeStretchingTempo_get(void * class_handler);
  extern void SuperpoweredAdvancedAudioPlayer_maxTimeStretchingTempo_set(void * class_handler, float newValue);
  extern int SuperpoweredAdvancedAudioPlayer_handleStems_get(void * class_handler);
  extern void SuperpoweredAdvancedAudioPlayer_handleStems_set(void * class_handler, int newValue);
  extern double SuperpoweredAdvancedAudioPlayer_defaultQuantum_get(void * class_handler);
  extern void SuperpoweredAdvancedAudioPlayer_defaultQuantum_set(void * class_handler, double newValue);
  extern void SuperpoweredAdvancedAudioPlayer_togglePlayback(void * class_handler);
  extern void SuperpoweredAdvancedAudioPlayer_endScratch(void * class_handler,int returnToStateBeforeScratch);
  extern void SuperpoweredAdvancedAudioPlayer_setFirstBeatMs(void * class_handler,double ms);
  extern int SuperpoweredAdvancedAudioPlayer_loop(void * class_handler,double startMs, double lengthMs, int jumpToStartMs, unsigned char pointID, int synchronisedStart, int forceDefaultQuantum, int preferWaitingforSynchronisedStart);
  extern void SuperpoweredAdvancedAudioPlayer_scratch(void * class_handler,double pitch, float smoothing);
  extern double SuperpoweredAdvancedAudioPlayer_getMsDifference(void * class_handler,double phase, double quantum);
  extern void SuperpoweredAdvancedAudioPlayer_clearTempFolder();
  extern void SuperpoweredAdvancedAudioPlayer_setPitchShiftCents(void * class_handler,int pitchShiftCents);
  extern void SuperpoweredAdvancedAudioPlayer_setTempFolder(char const* path);
  extern void SuperpoweredAdvancedAudioPlayer_onMediaserverInterrupt(void * class_handler);
  extern int SuperpoweredAdvancedAudioPlayer_loopBetween(void * class_handler,double startMs, double endMs, int jumpToStartMs, unsigned char pointID, int synchronisedStart, int forceDefaultQuantum, int preferWaitingforSynchronisedStart);
  extern void SuperpoweredAdvancedAudioPlayer_setPosition(void * class_handler,double ms, int andStop, int synchronisedStart, int forceDefaultQuantum, int preferWaitingforSynchronisedStart);
  extern void SuperpoweredAdvancedAudioPlayer_setBpm(void * class_handler,double newBpm);
  extern double SuperpoweredAdvancedAudioPlayer_lastProcessMs(void * class_handler);
  extern void SuperpoweredAdvancedAudioPlayer_resetBendMsOffset(void * class_handler);
  extern void SuperpoweredAdvancedAudioPlayer_jogTick(void * class_handler,int value, int bendStretch, float bendMaxPercent, unsigned int bendHoldMs, int parameterMode);
  extern void SuperpoweredAdvancedAudioPlayer_cachePosition(void * class_handler,double ms, unsigned char pointID);
  extern int SuperpoweredAdvancedAudioPlayer_process(void * class_handler,float* buffer, int bufferAdd, unsigned int numberOfSamples, float volume, double masterBpm, double masterMsElapsedSinceLastBeat, double phase, double quantum);
  extern void SuperpoweredAdvancedAudioPlayer_pitchBend(void * class_handler,float maxPercent, int bendStretch, int faster, unsigned int holdMs);
  extern void * SuperpoweredAdvancedAudioPlayer_new(void* clientData,void (*callback)(void*, int, void*), unsigned int sampleRate, unsigned char cachedPointCount, unsigned int internalBufferSizeSeconds, unsigned int negativeSeconds);
  extern void SuperpoweredAdvancedAudioPlayer_seek(void * class_handler,double percent);

  extern void SuperpoweredAdvancedAudioPlayer_play(void * class_handler,int synchronised);
  extern void SuperpoweredAdvancedAudioPlayer_pause(void * class_handler,float decelerateSeconds, unsigned int slipMs);
  extern void SuperpoweredAdvancedAudioPlayer_openHLS(void * class_handler,char const* url, char** customHTTPHeaders);
  extern void SuperpoweredAdvancedAudioPlayer_exitLoop(void * class_handler,int synchronisedStart);
  extern void SuperpoweredAdvancedAudioPlayer_setTempo(void * class_handler,double tempo, int masterTempo);
  extern void SuperpoweredAdvancedAudioPlayer_jogTouchEnd(void * class_handler,float decelerate, int synchronisedStart);
  extern int SuperpoweredAdvancedAudioPlayer_msInLoop(void * class_handler,double ms);
  extern void SuperpoweredAdvancedAudioPlayer_setPitchShift(void * class_handler,int pitchShift);
  extern int SuperpoweredAdvancedAudioPlayer_processMulti(void * class_handler,float** buffers, int* bufferAdds, unsigned int numberOfSamples, float* volumes, double masterBpm, double masterMsElapsedSinceLastBeat, double phase, double quantum);
  extern void SuperpoweredAdvancedAudioPlayer_setReverse(void * class_handler,int reverse, unsigned int slipMs);
  extern void SuperpoweredAdvancedAudioPlayer_jogTouchBegin(void * class_handler,int ticksPerTurn, int mode, unsigned int scratchSlipMs);
  extern void SuperpoweredAdvancedAudioPlayer_delete(void * class_handler);
  extern void SuperpoweredAdvancedAudioPlayer_setSamplerate(void * class_handler,unsigned int sampleRate);
  extern double SuperpoweredAdvancedAudioPlayer_closestBeatMs(void * class_handler,double ms, unsigned char* beatIndex);
  extern void SuperpoweredAdvancedAudioPlayer_endContinuousPitchBend(void * class_handler);
  extern void SuperpoweredAdvancedAudioPlayer_startScratch(void * class_handler,unsigned int slipMs, int stopImmediately);

  extern void SuperpoweredAdvancedAudioPlayer_open_A(void * class_handler,char const* path, char** customHTTPHeaders);
  extern void SuperpoweredAdvancedAudioPlayer_open_B(void * class_handler,char const* path, int offset, int length, char** customHTTPHeaders);


#ifdef __cplusplus
}
#endif

#endif
