// CPP to C glue code generated by Sweaty on Wed Jun 13 23:03:10 2018

// NO WARRANTIES ON PRODUCTION, for experiemental purposes only.
// TODO: Class member variable *MUST* be added manually
#ifndef __AUTO_CODE_SUPERPOWEREDFILTER__
#define __AUTO_CODE_SUPERPOWEREDFILTER__

#ifdef __cplusplus
extern "C" {
#endif

extern void SuperpoweredFilter2_setSamplerate(void * class_handler,unsigned int samplerate);

extern void SuperpoweredFilter_setBandlimitedParameters(void * class_handler,float frequency, float octaveWidth);
extern void SuperpoweredFilter_setSamplerate(void * class_handler,unsigned int samplerate);
extern void SuperpoweredFilter_setResonantParameters(void * class_handler,float frequency, float resonance);
extern void SuperpoweredFilter_delete(void * class_handler);
extern void SuperpoweredFilter_enable(void * class_handler,bool flag);
extern void SuperpoweredFilter_setBandlimitedParametersAndType(void * class_handler,float frequency, float octaveWidth, SuperpoweredFilterType type);
extern int SuperpoweredFilter_processMono(void * class_handler,float* input, float* output, unsigned int numberOfSamples);
extern void * SuperpoweredFilter_new(SuperpoweredFilterType filterType, unsigned int samplerate);
extern void SuperpoweredFilter_setResonantParametersAndType(void * class_handler,float frequency, float resonance, SuperpoweredFilterType type);
extern void SuperpoweredFilter_setParametricParameters(void * class_handler,float frequency, float octaveWidth, float dbGain);
extern void SuperpoweredFilter_setShelfParameters(void * class_handler,float frequency, float slope, float dbGain);
extern int SuperpoweredFilter_process(void * class_handler,float* input, float* output, unsigned int numberOfSamples);
extern void SuperpoweredFilter_setCustomCoefficients(void * class_handler,float* coefficients);
extern void SuperpoweredFilter_setShelfParametersAndType(void * class_handler,float frequency, float slope, float dbGain, SuperpoweredFilterType type);
extern void SuperpoweredFilter_reset(void * class_handler);

#ifdef __cplusplus
}
#endif

#endif