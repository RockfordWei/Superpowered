// CPP to C glue code generated by Sweaty on Wed Jun 13 23:03:10 2018

// NO WARRANTIES ON PRODUCTION, for experiemental purposes only.
// TODO: Class member variable *MUST* be added manually
#include "/usr/local/Superpowered/SuperpoweredReverb.h"
#include "CLANG_SuperpoweredReverb.h"
void SuperpoweredReverb_reset(void * class_handler)
{
  SuperpoweredReverb * real_class_handler = (SuperpoweredReverb *)class_handler;
  return real_class_handler->reset();
}

void SuperpoweredReverb_setWidth(void * class_handler,float value)
{
  SuperpoweredReverb * real_class_handler = (SuperpoweredReverb *)class_handler;
  return real_class_handler->setWidth(value);
}

void SuperpoweredReverb_setLowCut(void * class_handler,float hz)
{
  SuperpoweredReverb * real_class_handler = (SuperpoweredReverb *)class_handler;
  return real_class_handler->setLowCut(hz);
}

void SuperpoweredReverb_setMix(void * class_handler,float value)
{
  SuperpoweredReverb * real_class_handler = (SuperpoweredReverb *)class_handler;
  return real_class_handler->setMix(value);
}

void SuperpoweredReverb_setPredelay(void * class_handler,float ms)
{
  SuperpoweredReverb * real_class_handler = (SuperpoweredReverb *)class_handler;
  return real_class_handler->setPredelay(ms);
}

void SuperpoweredReverb_setWet(void * class_handler,float value)
{
  SuperpoweredReverb * real_class_handler = (SuperpoweredReverb *)class_handler;
  return real_class_handler->setWet(value);
}

void SuperpoweredReverb_enable(void * class_handler,bool flag)
{
  SuperpoweredReverb * real_class_handler = (SuperpoweredReverb *)class_handler;
  return real_class_handler->enable(flag);
}

void SuperpoweredReverb_setDry(void * class_handler,float value)
{
  SuperpoweredReverb * real_class_handler = (SuperpoweredReverb *)class_handler;
  return real_class_handler->setDry(value);
}

void SuperpoweredReverb_setRoomSize(void * class_handler,float value)
{
  SuperpoweredReverb * real_class_handler = (SuperpoweredReverb *)class_handler;
  return real_class_handler->setRoomSize(value);
}

int SuperpoweredReverb_process(void * class_handler,float* input, float* output, unsigned int numberOfSamples)
{
  SuperpoweredReverb * real_class_handler = (SuperpoweredReverb *)class_handler;
  return real_class_handler->process(input,output,numberOfSamples);
}

void SuperpoweredReverb_setDamp(void * class_handler,float value)
{
  SuperpoweredReverb * real_class_handler = (SuperpoweredReverb *)class_handler;
  return real_class_handler->setDamp(value);
}

void * SuperpoweredReverb_new(unsigned int samplerate, unsigned int maximumSamplerate)
{
  return (void*)(new SuperpoweredReverb(samplerate,maximumSamplerate));
}

void SuperpoweredReverb_setSamplerate(void * class_handler,unsigned int samplerate)
{
  SuperpoweredReverb * real_class_handler = (SuperpoweredReverb *)class_handler;
  return real_class_handler->setSamplerate(samplerate);
}

void SuperpoweredReverb_delete(void * class_handler)
{
  delete (SuperpoweredReverb *)class_handler;
}