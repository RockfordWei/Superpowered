// CPP to C glue code generated by Sweaty on Wed Jun 13 23:03:10 2018

// NO WARRANTIES ON PRODUCTION, for experiemental purposes only.
// TODO: Class member variable *MUST* be added manually
#include "/usr/local/Superpowered/SuperpoweredTimeStretching.h"
#include "CLANG_SuperpoweredTimeStretching.h"
int SuperpoweredTimeStretching_setRateAndPitchShiftCents(void * class_handler,float newRate, int newShiftCents)
{
  SuperpoweredTimeStretching * real_class_handler = (SuperpoweredTimeStretching *)class_handler;
  return real_class_handler->setRateAndPitchShiftCents(newRate,newShiftCents);
}

void SuperpoweredTimeStretching_reset(void * class_handler)
{
  SuperpoweredTimeStretching * real_class_handler = (SuperpoweredTimeStretching *)class_handler;
  return real_class_handler->reset();
}

void * SuperpoweredTimeStretching_new(unsigned int samplerate, float minimumRate, unsigned char sound)
{
  return (void*)(new SuperpoweredTimeStretching(samplerate,minimumRate,sound));
}

void SuperpoweredTimeStretching_process(void * class_handler,SuperpoweredAudiobufferlistElement* input, SuperpoweredAudiopointerList* outputList)
{
  SuperpoweredTimeStretching * real_class_handler = (SuperpoweredTimeStretching *)class_handler;
  return real_class_handler->process(input,outputList);
}

void SuperpoweredTimeStretching_delete(void * class_handler)
{
  delete (SuperpoweredTimeStretching *)class_handler;
}

void SuperpoweredTimeStretching_removeSamplesFromInputBuffersEnd(void * class_handler,unsigned int samples)
{
  SuperpoweredTimeStretching * real_class_handler = (SuperpoweredTimeStretching *)class_handler;
  return real_class_handler->removeSamplesFromInputBuffersEnd(samples);
}

void SuperpoweredTimeStretching_setStereoPairs(void * class_handler,unsigned int numStereoPairs)
{
  SuperpoweredTimeStretching * real_class_handler = (SuperpoweredTimeStretching *)class_handler;
  return real_class_handler->setStereoPairs(numStereoPairs);
}

int SuperpoweredTimeStretching_setRateAndPitchShift(void * class_handler,float newRate, int newShift)
{
  SuperpoweredTimeStretching * real_class_handler = (SuperpoweredTimeStretching *)class_handler;
  return real_class_handler->setRateAndPitchShift(newRate,newShift);
}

void SuperpoweredTimeStretching_setSampleRate(void * class_handler,unsigned int samplerate)
{
  SuperpoweredTimeStretching * real_class_handler = (SuperpoweredTimeStretching *)class_handler;
  return real_class_handler->setSampleRate(samplerate);
}