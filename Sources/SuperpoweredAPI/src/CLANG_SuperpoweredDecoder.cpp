// CPP to C glue code generated by Sweaty on Wed Jun 13 23:03:10 2018

// NO WARRANTIES ON PRODUCTION, for experiemental purposes only.
// TODO: Class member variable *MUST* be added manually
#include "/usr/local/Superpowered/SuperpoweredDecoder.h"
#include "CLANG_SuperpoweredDecoder.h"
unsigned char mp3File_decode(void * class_handler,short* pcmOutput, unsigned int* samples)
{
  mp3File * real_class_handler = (mp3File *)class_handler;
  return real_class_handler->decode(pcmOutput,samples);
}

unsigned char waveFile_decode(void * class_handler,short* pcmOutput, unsigned int* samples)
{
  waveFile * real_class_handler = (waveFile *)class_handler;
  return real_class_handler->decode(pcmOutput,samples);
}

unsigned char aacFile_decode(void * class_handler,short* pcmOutput, unsigned int* samples)
{
  aacFile * real_class_handler = (aacFile *)class_handler;
  return real_class_handler->decode(pcmOutput,samples);
}

unsigned char SuperpoweredDecoder_getAudioStartSample(void * class_handler,unsigned int* startSample, unsigned int limitSamples, int decibel, unsigned int* cancelIfBuffering)
{
  SuperpoweredDecoder * real_class_handler = (SuperpoweredDecoder *)class_handler;
  return real_class_handler->getAudioStartSample(startSample,limitSamples,decibel,cancelIfBuffering);
}

unsigned char SuperpoweredDecoder_seek(void * class_handler,long long sample, bool precise)
{
  SuperpoweredDecoder * real_class_handler = (SuperpoweredDecoder *)class_handler;
  return real_class_handler->seek(sample,precise);
}

void SuperpoweredDecoder_reconnectToMediaserver(void * class_handler)
{
  SuperpoweredDecoder * real_class_handler = (SuperpoweredDecoder *)class_handler;
  return real_class_handler->reconnectToMediaserver();
}

void * SuperpoweredDecoder_new(void * downloadedCallback, void* clientData)
{
  return (void*)(new SuperpoweredDecoder(downloadedCallback,clientData));
}

void SuperpoweredDecoder_getMetaData(void * class_handler,char** artist, char** title, char** album, void** image, int* imageSizeBytes, float* bpm,void * callback, void* clientData, int maxFrameDataSize)
{
  SuperpoweredDecoder * real_class_handler = (SuperpoweredDecoder *)class_handler;
  return real_class_handler->getMetaData(artist,title,album,image,imageSizeBytes,bpm,callback,clientData,maxFrameDataSize);
}

unsigned char SuperpoweredDecoder_decode(void * class_handler,short* pcmOutput, unsigned int* samples)
{
  SuperpoweredDecoder * real_class_handler = (SuperpoweredDecoder *)class_handler;
  return real_class_handler->decode(pcmOutput,samples);
}

const char * SuperpoweredDecoder_open(void * class_handler,char const* path, bool metaOnly, int offset, int length, int stemsIndex, char** customHTTPHeaders, int* errorCode)
{
  SuperpoweredDecoder * real_class_handler = (SuperpoweredDecoder *)class_handler;
  return real_class_handler->open(path,metaOnly,offset,length,stemsIndex,customHTTPHeaders,errorCode);
}

void SuperpoweredDecoder_delete(void * class_handler)
{
  delete (SuperpoweredDecoder *)class_handler;
}

int SuperpoweredDecoder_getStemsInfo(void * class_handler,char** names, char** colors, stemsCompressor* compressor, stemsLimiter* limiter)
{
  SuperpoweredDecoder * real_class_handler = (SuperpoweredDecoder *)class_handler;
  return real_class_handler->getStemsInfo(names,colors,compressor,limiter);
}

unsigned char aiffFile_decode(void * class_handler,short* pcmOutput, unsigned int* samples)
{
  aiffFile * real_class_handler = (aiffFile *)class_handler;
  return real_class_handler->decode(pcmOutput,samples);
}