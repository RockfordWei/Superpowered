// CPP to C glue code generated by Sweaty on Wed Jun 13 23:03:10 2018

// NO WARRANTIES ON PRODUCTION, for experiemental purposes only.
// TODO: Class member variable *MUST* be added manually
#include "/usr/local/Superpowered/SuperpoweredAudioBuffers.h"
#include "CLANG_SuperpoweredAudioBuffers.h"
int64_t SuperpoweredAudiopointerList_startSamplePosition(void * class_handler)
{
  SuperpoweredAudiopointerList * real_class_handler = (SuperpoweredAudiopointerList *)class_handler;
  return real_class_handler->startSamplePosition();
}

void * SuperpoweredAudiopointerList_prevSliceItem(void * class_handler,int* lengthSamples, float* samplesUsed, int stereoPairIndex)
{
  SuperpoweredAudiopointerList * real_class_handler = (SuperpoweredAudiopointerList *)class_handler;
  return real_class_handler->prevSliceItem(lengthSamples,samplesUsed,stereoPairIndex);
}

void SuperpoweredAudiopointerList_insert(void * class_handler,SuperpoweredAudiobufferlistElement* buffer)
{
  SuperpoweredAudiopointerList * real_class_handler = (SuperpoweredAudiopointerList *)class_handler;
  return real_class_handler->insert(buffer);
}

int64_t SuperpoweredAudiopointerList_nextSamplePosition(void * class_handler)
{
  SuperpoweredAudiopointerList * real_class_handler = (SuperpoweredAudiopointerList *)class_handler;
  return real_class_handler->nextSamplePosition();
}

void SuperpoweredAudiopointerList_rewindSlice(void * class_handler)
{
  SuperpoweredAudiopointerList * real_class_handler = (SuperpoweredAudiopointerList *)class_handler;
  return real_class_handler->rewindSlice();
}

void SuperpoweredAudiopointerList_copyAllBuffersTo(void * class_handler,SuperpoweredAudiopointerList* anotherList)
{
  SuperpoweredAudiopointerList * real_class_handler = (SuperpoweredAudiopointerList *)class_handler;
  return real_class_handler->copyAllBuffersTo(anotherList);
}

void SuperpoweredAudiopointerList_forwardToLastSliceBuffer(void * class_handler)
{
  SuperpoweredAudiopointerList * real_class_handler = (SuperpoweredAudiopointerList *)class_handler;
  return real_class_handler->forwardToLastSliceBuffer();
}

int64_t SuperpoweredAudiopointerList_samplePositionOfSliceBeginning(void * class_handler)
{
  SuperpoweredAudiopointerList * real_class_handler = (SuperpoweredAudiopointerList *)class_handler;
  return real_class_handler->samplePositionOfSliceBeginning();
}

void SuperpoweredAudiopointerList_clear(void * class_handler)
{
  SuperpoweredAudiopointerList * real_class_handler = (SuperpoweredAudiopointerList *)class_handler;
  return real_class_handler->clear();
}

void SuperpoweredAudiopointerList_append(void * class_handler,SuperpoweredAudiobufferlistElement* buffer)
{
  SuperpoweredAudiopointerList * real_class_handler = (SuperpoweredAudiopointerList *)class_handler;
  return real_class_handler->append(buffer);
}

void * SuperpoweredAudiopointerList_new(unsigned int bytesPerSample, unsigned int typicalNumElements)
{
  return (void*)(new SuperpoweredAudiopointerList(bytesPerSample,typicalNumElements));
}

int SuperpoweredAudiopointerList_makeSlice(void * class_handler,int fromSample, int lengthSamples)
{
  SuperpoweredAudiopointerList * real_class_handler = (SuperpoweredAudiopointerList *)class_handler;
  return real_class_handler->makeSlice(fromSample,lengthSamples);
}

void SuperpoweredAudiopointerList_delete(void * class_handler)
{
  delete (SuperpoweredAudiopointerList *)class_handler;
}

void SuperpoweredAudiopointerList_truncate(void * class_handler,int numSamples, bool fromTheBeginning)
{
  SuperpoweredAudiopointerList * real_class_handler = (SuperpoweredAudiopointerList *)class_handler;
  return real_class_handler->truncate(numSamples,fromTheBeginning);
}

void * SuperpoweredAudiopointerList_nextSliceItem(void * class_handler,int* lengthSamples, float* samplesUsed, int stereoPairIndex, long long* nextSamplePosition)
{
  SuperpoweredAudiopointerList * real_class_handler = (SuperpoweredAudiopointerList *)class_handler;
  return real_class_handler->nextSliceItem(lengthSamples,samplesUsed,stereoPairIndex,nextSamplePosition);
}

void SuperpoweredAudiobufferPool_retainBuffer(void* buffer)
{
  return SuperpoweredAudiobufferPool::retainBuffer(buffer);
}

void SuperpoweredAudiobufferPool_ping()
{
  return SuperpoweredAudiobufferPool::ping();
}

void * SuperpoweredAudiobufferPool_allocBuffer(unsigned int sizeBytes)
{
  return SuperpoweredAudiobufferPool::allocBuffer(sizeBytes);
}

void SuperpoweredAudiobufferPool_releaseBuffer(void* buffer)
{
  return SuperpoweredAudiobufferPool::releaseBuffer(buffer);
}

void * SuperpoweredAudiobufferPool_getBuffer(unsigned int sizeBytes)
{
  return SuperpoweredAudiobufferPool::getBuffer(sizeBytes);
}