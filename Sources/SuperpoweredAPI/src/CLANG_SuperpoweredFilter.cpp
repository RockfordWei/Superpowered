// CPP to C glue code generated by Sweaty on Wed Jun 13 23:03:10 2018

// NO WARRANTIES ON PRODUCTION, for experiemental purposes only.
// TODO: Class member variable *MUST* be added manually
#include "/usr/local/Superpowered/SuperpoweredFilter.h"
#include "CLANG_SuperpoweredFilter.h"
void SuperpoweredFilter2_setSamplerate(void * class_handler,unsigned int samplerate)
{
  SuperpoweredFilter2 * real_class_handler = (SuperpoweredFilter2 *)class_handler;
  return real_class_handler->setSamplerate(samplerate);
}

void SuperpoweredFilter_setBandlimitedParameters(void * class_handler,float frequency, float octaveWidth)
{
  SuperpoweredFilter * real_class_handler = (SuperpoweredFilter *)class_handler;
  return real_class_handler->setBandlimitedParameters(frequency,octaveWidth);
}

void SuperpoweredFilter_setSamplerate(void * class_handler,unsigned int samplerate)
{
  SuperpoweredFilter * real_class_handler = (SuperpoweredFilter *)class_handler;
  return real_class_handler->setSamplerate(samplerate);
}

void SuperpoweredFilter_setResonantParameters(void * class_handler,float frequency, float resonance)
{
  SuperpoweredFilter * real_class_handler = (SuperpoweredFilter *)class_handler;
  return real_class_handler->setResonantParameters(frequency,resonance);
}

void SuperpoweredFilter_delete(void * class_handler)
{
  delete (SuperpoweredFilter *)class_handler;
}

void SuperpoweredFilter_enable(void * class_handler,bool flag)
{
  SuperpoweredFilter * real_class_handler = (SuperpoweredFilter *)class_handler;
  return real_class_handler->enable(flag);
}

void SuperpoweredFilter_setBandlimitedParametersAndType(void * class_handler,float frequency, float octaveWidth, SuperpoweredFilterType type)
{
  SuperpoweredFilter * real_class_handler = (SuperpoweredFilter *)class_handler;
  return real_class_handler->setBandlimitedParametersAndType(frequency,octaveWidth,type);
}

int SuperpoweredFilter_processMono(void * class_handler,float* input, float* output, unsigned int numberOfSamples)
{
  SuperpoweredFilter * real_class_handler = (SuperpoweredFilter *)class_handler;
  return real_class_handler->processMono(input,output,numberOfSamples);
}

void * SuperpoweredFilter_new(SuperpoweredFilterType filterType, unsigned int samplerate)
{
  return (void*)(new SuperpoweredFilter(filterType,samplerate));
}

void SuperpoweredFilter_setResonantParametersAndType(void * class_handler,float frequency, float resonance, SuperpoweredFilterType type)
{
  SuperpoweredFilter * real_class_handler = (SuperpoweredFilter *)class_handler;
  return real_class_handler->setResonantParametersAndType(frequency,resonance,type);
}

void SuperpoweredFilter_setParametricParameters(void * class_handler,float frequency, float octaveWidth, float dbGain)
{
  SuperpoweredFilter * real_class_handler = (SuperpoweredFilter *)class_handler;
  return real_class_handler->setParametricParameters(frequency,octaveWidth,dbGain);
}

void SuperpoweredFilter_setShelfParameters(void * class_handler,float frequency, float slope, float dbGain)
{
  SuperpoweredFilter * real_class_handler = (SuperpoweredFilter *)class_handler;
  return real_class_handler->setShelfParameters(frequency,slope,dbGain);
}

int SuperpoweredFilter_process(void * class_handler,float* input, float* output, unsigned int numberOfSamples)
{
  SuperpoweredFilter * real_class_handler = (SuperpoweredFilter *)class_handler;
  return real_class_handler->process(input,output,numberOfSamples);
}

void SuperpoweredFilter_setCustomCoefficients(void * class_handler,float* coefficients)
{
  SuperpoweredFilter * real_class_handler = (SuperpoweredFilter *)class_handler;
  return real_class_handler->setCustomCoefficients(coefficients);
}

void SuperpoweredFilter_setShelfParametersAndType(void * class_handler,float frequency, float slope, float dbGain, SuperpoweredFilterType type)
{
  SuperpoweredFilter * real_class_handler = (SuperpoweredFilter *)class_handler;
  return real_class_handler->setShelfParametersAndType(frequency,slope,dbGain,type);
}

void SuperpoweredFilter_reset(void * class_handler)
{
  SuperpoweredFilter * real_class_handler = (SuperpoweredFilter *)class_handler;
  return real_class_handler->reset();
}